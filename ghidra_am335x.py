"""
Ghidra script to load AM335x memory map. Script based on SVD-Loader script.
"""

from ghidra.program.model.data import Structure, StructureDataType, UnsignedIntegerDataType, DataTypeConflictHandler
from ghidra.program.model.data import UnsignedShortDataType, ByteDataType, UnsignedLongLongDataType
from ghidra.program.model.mem import MemoryBlockType
from ghidra.program.model.address import AddressFactory
from ghidra.program.model.symbol import SourceType
from ghidra.program.model.mem import MemoryConflictException
from ghidra.app.cmd.disassemble import ArmDisassembleCommand


class AM335xMemRegion:
    def __init__(self,name,base_addr,sz,R,W,X,regs=None):
        self.name = name
        self.base_addr = base_addr
        self.sz = sz
        self.R = R
        self.W = W
        self.X = X
        self.regs = regs

class RegLabel:
    def __init__(self,name,offset,size=4):
        self.name = name
        self.offset = offset
        self.size = size  # Register size in bytes (default = 4)

class AM335xVector:
    def __init__(self,name,addr):
        self.name = name
        self.addr = addr


rom_except_vectors = [
    AM335xVector("ROM_RESET_VECTOR",            0x00020000),
    AM335xVector("ROM_SWI_VECTOR",              0x00020008),
    AM335xVector("ROM_PREFETCH_ABORT_VECTOR",   0x0002000C),
    AM335xVector("ROM_DATA_ABORT_VECTOR",       0x00020010),
    AM335xVector("ROM_IRQ_VECTOR",              0x00020018),
    AM335xVector("ROM_FIQ_VECTOR",              0x0002001C)
]

rom_except_deadloops = [
    AM335xVector("ROM_SWI_DEADLOOP",              0x00020084),
    AM335xVector("ROM_PREFETCH_ABORT_DEADLOOP",   0x00020088),
    AM335xVector("ROM_DATA_ABORT_DEADLOOP",       0x0002008C),
    AM335xVector("ROM_IRQ_DEADLOOP",              0x00020094),
    AM335xVector("ROM_FIQ_DEADLOOP",              0x00020098),
    AM335xVector("ROM_VALIDATION_TESTS_PASS_DEADLOOP", 0x0002009C),
    AM335xVector("ROM_VALIDATION_TESTS_FAIL_DEADLOOP", 0x000200A0),
    AM335xVector("ROM_IMAGE_NOT_EXEC_OR_RET_DEADLOOP", 0x000200A8)
]

ram_except_vectors = [
    AM335xVector("RAM_SWI_VECTOR",            0x4030CE28),
    AM335xVector("RAM_PREFETCH_ABORT_VECTOR", 0x4030CE2C),
    AM335xVector("RAM_DATA_ABORT_VECTOR",     0x4030CE30),
    AM335xVector("RAM_IRQ_VECTOR",            0x4030CE38),
    AM335xVector("RAM_FIQ_VECTOR",            0x4030CE3C),
]

ram_except_branches = [
    AM335xVector("RAM_SWI_BRANCH",            0x4030CE08),
    AM335xVector("RAM_PREFETCH_ABORT_BRANCH", 0x4030CE0C),
    AM335xVector("RAM_DATA_ABORT_BRANCH",     0x4030CE10),
    AM335xVector("RAM_IRQ_BRANCH",            0x4030CE18),
    AM335xVector("RAM_FIQ_BRANCH",            0x4030CE1C)
]

# MMC Registers (MMCHS0, 0x4806_0000) (MMCHS1, 0x481d_8000) (MMCHS2, 0x4781_0000)
mmc_regs = [
    RegLabel("SD_SYSCONFIG",0x110),
    RegLabel("SD_SYSSTATUS",0x114),
    RegLabel("SD_CSRE",     0x124),
    RegLabel("SD_SYSTEST",  0x128),
    RegLabel("SD_CON",      0x12C),
    RegLabel("SD_PWCNT",    0x130),
    RegLabel("SD_SDMASA",   0x200),
    RegLabel("SD_BLK",      0x204),
    RegLabel("SD_ARG",      0x208),
    RegLabel("SD_CMD",      0x20C),
    RegLabel("SD_RSP10",    0x210),
    RegLabel("SD_RSP32",    0x214),
    RegLabel("SD_RSP54",    0x218),
    RegLabel("SD_RSP76",    0x21C),
    RegLabel("SD_DATA",     0x220),
    RegLabel("SD_PSTATE",   0x224),
    RegLabel("SD_HCTL",     0x228),
    RegLabel("SD_SYSCTL",   0x22C),
    RegLabel("SD_STAT",     0x230),
    RegLabel("SD_IE",       0x234),
    RegLabel("SD_ISE",      0x238),
    RegLabel("SD_AC12",     0x23C),
    RegLabel("SD_CAPA",     0x240),
    RegLabel("SD_CUR_CAPA", 0x248),
    RegLabel("SD_FE",       0x250),
    RegLabel("SD_ADMAES",   0x254),
    RegLabel("SD_ADMASAL",  0x258),
    RegLabel("SD_ADMASAH",  0x25C),
    RegLabel("SD_REV",      0x2FC)
    ]

# INTERRUPT CONTROLLER REGISTERS (INTCPS, 0x4820_0000)
interrupt_ctl_regs = [
    RegLabel("INTC_REVISION",       0x0),
    RegLabel("INTC_SYSCONFIG",      0x10),
    RegLabel("INTC_SYSSTATUS",      0x14),
    RegLabel("INTC_SIR_IRQ",        0x40),
    RegLabel("INTC_SIR_FIQ",        0x44),
    RegLabel("INTC_CONTROL",        0x48),
    RegLabel("INTC_PROTECTION",     0x4C),
    RegLabel("INTC_IDLE",           0x50),
    RegLabel("INTC_IRQ_PRIORITY",   0x60),
    RegLabel("INTC_FIQ_PRIORITY",   0x64),
    RegLabel("INTC_THRESHOLD",      0x68),
    RegLabel("INTC_ITR0",           0x80),
    RegLabel("INTC_MIR0",           0x84),
    RegLabel("INTC_MIR_CLEAR0",     0x88),
    RegLabel("INTC_MIR_SET0",       0x8C),
    RegLabel("INTC_ISR_SET0",       0x90),
    RegLabel("INTC_ISR_CLEAR0",     0x94),
    RegLabel("INTC_PENDING_IRQ0",   0x98),
    RegLabel("INTC_PENDING_FIQ0",   0x9C),
    RegLabel("INTC_ITR1",           0xA0),
    RegLabel("INTC_MIR1",           0xA4),
    RegLabel("INTC_MIR_CLEAR1",     0xA8),
    RegLabel("INTC_MIR_SET1",       0xAC),
    RegLabel("INTC_ISR_SET1",       0xB0),
    RegLabel("INTC_ISR_CLEAR1",     0xB4),
    RegLabel("INTC_PENDING_IRQ1",   0xB8),
    RegLabel("INTC_PENDING_FIQ1",   0xBC),
    RegLabel("INTC_ITR2",           0xC0),
    RegLabel("INTC_MIR2",           0xC4),
    RegLabel("INTC_MIR_CLEAR2",     0xC8),
    RegLabel("INTC_MIR_SET2",       0xCC),
    RegLabel("INTC_ISR_SET2",       0xD0),
    RegLabel("INTC_ISR_CLEAR2",     0xD4),
    RegLabel("INTC_PENDING_IRQ2",   0xD8),
    RegLabel("INTC_PENDING_FIQ2",   0xDC),
    RegLabel("INTC_ITR3",           0xE0),
    RegLabel("INTC_MIR3",           0xE4),
    RegLabel("INTC_MIR_CLEAR3",     0xE8),
    RegLabel("INTC_MIR_SET3",       0xEC),
    RegLabel("INTC_ISR_SET3",       0xF0),
    RegLabel("INTC_ISR_CLEAR3",     0xF4),
    RegLabel("INTC_PENDING_IRQ3",   0xF8),
    RegLabel("INTC_PENDING_FIQ3",   0xFC),
    RegLabel("INTC_ILR_0",          0x10),
    RegLabel("INTC_ILR_127",        0x2F)
    ]

# CLOCK MODULE REGISTERS
# PER
clock_module_periph_regs = [
    RegLabel("CM_PER_L4LS_CLKSTCTRL",      0x0), 
    RegLabel("CM_PER_L3S_CLKSTCTRL",       0x4), 
    RegLabel("CM_PER_L3_CLKSTCTRL",        0xC), 
    RegLabel("CM_PER_CPGMAC0_CLKCTRL",     0x14), 
    RegLabel("CM_PER_LCDC_CLKCTRL",        0x18), 
    RegLabel("CM_PER_USB0_CLKCTRL",        0x1C), 
    RegLabel("CM_PER_TPTC0_CLKCTRL",       0x24), 
    RegLabel("CM_PER_EMIF_CLKCTRL",        0x28), 
    RegLabel("CM_PER_OCMCRAM_CLKCTRL",     0x2C), 
    RegLabel("CM_PER_GPMC_CLKCTRL",        0x30), 
    RegLabel("CM_PER_MCASP0_CLKCTRL",      0x34), 
    RegLabel("CM_PER_UART5_CLKCTRL",       0x38), 
    RegLabel("CM_PER_MMC0_CLKCTRL",        0x3C), 
    RegLabel("CM_PER_ELM_CLKCTRL",     0x40), 
    RegLabel("CM_PER_I2C2_CLKCTRL",        0x44), 
    RegLabel("CM_PER_I2C1_CLKCTRL",        0x48), 
    RegLabel("CM_PER_SPI0_CLKCTRL",        0x4C), 
    RegLabel("CM_PER_SPI1_CLKCTRL",        0x50), 
    RegLabel("CM_PER_L4LS_CLKCTRL",        0x60), 
    RegLabel("CM_PER_MCASP1_CLKCTRL",      0x68), 
    RegLabel("CM_PER_UART1_CLKCTRL",       0x6C), 
    RegLabel("CM_PER_UART2_CLKCTRL",       0x70), 
    RegLabel("CM_PER_UART3_CLKCTRL",       0x74), 
    RegLabel("CM_PER_UART4_CLKCTRL",       0x78), 
    RegLabel("CM_PER_TIMER7_CLKCTRL",      0x7C), 
    RegLabel("CM_PER_TIMER2_CLKCTRL",      0x80), 
    RegLabel("CM_PER_TIMER3_CLKCTRL",      0x84), 
    RegLabel("CM_PER_TIMER4_CLKCTRL",      0x88), 
    RegLabel("CM_PER_GPIO1_CLKCTRL",       0xAC), 
    RegLabel("CM_PER_GPIO2_CLKCTRL",       0xB0), 
    RegLabel("CM_PER_GPIO3_CLKCTRL",       0xB4), 
    RegLabel("CM_PER_TPCC_CLKCTRL",        0xBC), 
    RegLabel("CM_PER_DCAN0_CLKCTRL",       0xC0), 
    RegLabel("CM_PER_DCAN1_CLKCTRL",       0xC4), 
    RegLabel("CM_PER_EPWMSS1_CLKCTRL",     0xCC), 
    RegLabel("CM_PER_EPWMSS0_CLKCTRL",     0xD4), 
    RegLabel("CM_PER_EPWMSS2_CLKCTRL",     0xD8), 
    RegLabel("CM_PER_L3_INSTR_CLKCTRL",        0xDC), 
    RegLabel("CM_PER_L3_CLKCTRL",      0xE0), 
    RegLabel("CM_PER_IEEE5000_CLKCTRL",        0xE4), 
    RegLabel("CM_PER_PRU_ICSS_CLKCTRL",        0xE8), 
    RegLabel("CM_PER_TIMER5_CLKCTRL",      0xEC), 
    RegLabel("CM_PER_TIMER6_CLKCTRL",      0xF0), 
    RegLabel("CM_PER_MMC1_CLKCTRL",        0xF4), 
    RegLabel("CM_PER_MMC2_CLKCTRL",        0xF8), 
    RegLabel("CM_PER_TPTC1_CLKCTRL",       0xFC), 
    RegLabel("CM_PER_TPTC2_CLKCTRL",       0x100), 
    RegLabel("CM_PER_SPINLOCK_CLKCTRL",        0x10C), 
    RegLabel("CM_PER_MAILBOX0_CLKCTRL",        0x110), 
    RegLabel("CM_PER_L4HS_CLKSTCTRL",      0x11C), 
    RegLabel("CM_PER_L4HS_CLKCTRL",        0x120), 
    RegLabel("CM_PER_OCPWP_L3_CLKSTCTRL",      0x12C), 
    RegLabel("CM_PER_OCPWP_CLKCTRL",       0x130), 
    RegLabel("CM_PER_PRU_ICSS_CLKSTCTRL",      0x140), 
    RegLabel("CM_PER_CPSW_CLKSTCTRL",      0x144), 
    RegLabel("CM_PER_LCDC_CLKSTCTRL",      0x148), 
    RegLabel("CM_PER_CLKDIV32K_CLKCTRL",       0x14C), 
    RegLabel("CM_PER_CLK_24MHZ_CLKSTCTR" ,     0x150)
]

# WKUP
clock_module_wkup_regs = [
    RegLabel("CM_WKUP_CLKSTCTRL", 0x0),
    RegLabel("CM_WKUP_CONTROL_CLKCTRL", 0x4),
    RegLabel("CM_WKUP_GPIO0_CLKCTRL", 0x8),
    RegLabel("CM_WKUP_L4WKUP_CLKCTRL", 0xC),
    RegLabel("CM_WKUP_TIMER0_CLKCTRL", 0x10),
    RegLabel("CM_WKUP_DEBUGSS_CLKCTR", 0x14),
    RegLabel("CM_L3_AON_CLKSTCTRL", 0x18),
    RegLabel("CM_AUTOIDLE_DPLL_MPU", 0x1C),
    RegLabel("CM_IDLEST_DPLL_MPU", 0x20),
    RegLabel("CM_SSC_DELTAMSTEP_DPLL_MPU", 0x24),
    RegLabel("CM_SSC_MODFREQDIV_DPLL_MPU", 0x28),
    RegLabel("CM_CLKSEL_DPLL_MPU", 0x2C),
    RegLabel("CM_AUTOIDLE_DPLL_DDR", 0x30),
    RegLabel("CM_IDLEST_DPLL_DDR", 0x34),
    RegLabel("CM_SSC_DELTAMSTEP_DPLL_DDR", 0x38),
    RegLabel("CM_SSC_MODFREQDIV_DPLL_DDR", 0x3C),
    RegLabel("CM_CLKSEL_DPLL_DDR", 0x40),
    RegLabel("CM_AUTOIDLE_DPLL_DISP", 0x44),
    RegLabel("CM_IDLEST_DPLL_DISP", 0x48),
    RegLabel("CM_SSC_DELTAMSTEP_DPLL_DISP", 0x4C),
    RegLabel("CM_SSC_MODFREQDIV_DPLL_DISP", 0x50),
    RegLabel("CM_CLKSEL_DPLL_DISP", 0x54),
    RegLabel("CM_AUTOIDLE_DPLL_CORE", 0x58),
    RegLabel("CM_IDLEST_DPLL_CORE", 0x5C),
    RegLabel("CM_SSC_DELTAMSTEP_DPLL_CORE", 0x60),
    RegLabel("CM_SSC_MODFREQDIV_DPLL_CORE", 0x64),
    RegLabel("CM_CLKSEL_DPLL_CORE", 0x68),
    RegLabel("CM_AUTOIDLE_DPLL_PER", 0x6C),
    RegLabel("CM_IDLEST_DPLL_PER", 0x70),
    RegLabel("CM_SSC_DELTAMSTEP_DPLL_PER", 0x74),
    RegLabel("CM_SSC_MODFREQDIV_DPLL_PER", 0x78),
    RegLabel("CM_CLKDCOLDO_DPLL_PER", 0x7C),
    RegLabel("CM_DIV_M4_DPLL_CORE", 0x80),
    RegLabel("CM_DIV_M5_DPLL_CORE", 0x84),
    RegLabel("CM_CLKMODE_DPLL_MPU", 0x88),
    RegLabel("CM_CLKMODE_DPLL_PER", 0x8C),
    RegLabel("CM_CLKMODE_DPLL_CORE", 0x90),
    RegLabel("CM_CLKMODE_DPLL_DDR", 0x94),
    RegLabel("CM_CLKMODE_DPLL_DISP", 0x98),
    RegLabel("CM_CLKSEL_DPLL_PERIPH", 0x9C),
    RegLabel("CM_DIV_M2_DPLL_DDR", 0xA0),
    RegLabel("CM_DIV_M2_DPLL_DISP", 0xA4),
    RegLabel("CM_DIV_M2_DPLL_MPU", 0xA8),
    RegLabel("CM_DIV_M2_DPLL_PER", 0xAC),
    RegLabel("CM_WKUP_WKUP_M3_CLKCTRL", 0xB0),
    RegLabel("CM_WKUP_UART0_CLKCTRL", 0xB4),
    RegLabel("CM_WKUP_I2C0_CLKCTRL", 0xB8),
    RegLabel("CM_WKUP_ADC_TSC_CLKCTRL", 0xBC),
    RegLabel("CM_WKUP_SMARTREFLEX0_CLKCTRL", 0xC0),
    RegLabel("CM_WKUP_TIMER1_CLKCTRL", 0xC4),
    RegLabel("CM_WKUP_SMARTREFLEX1_CLKCTRL", 0xC8),
    RegLabel("CM_L4_WKUP_AON_CLKSTCTRL", 0xCC),
    RegLabel("CM_WKUP_WDT1_CLKCTRL", 0xD4),
    RegLabel("CM_DIV_M6_DPLL_CORE", 0xD8)
    ]

# DPLL
clock_module_dpll_regs = [
    RegLabel("CLKSEL_TIMER7_CLK", 0x4),
    RegLabel("CLKSEL_TIMER2_CLK", 0x8),
    RegLabel("CLKSEL_TIMER3_CLK", 0xC),
    RegLabel("CLKSEL_TIMER4_CLK", 0x10),
    RegLabel("CM_MAC_CLKSEL", 0x14),
    RegLabel("CLKSEL_TIMER5_CLK", 0x18),
    RegLabel("CLKSEL_TIMER6_CLK", 0x1C),
    RegLabel("CM_CPTS_RFT_CLKSEL", 0x20),
    RegLabel("CLKSEL_TIMER1MS_CLK", 0x28),
    RegLabel("CLKSEL_GFX_FCLK", 0x2C),
    RegLabel("CLKSEL_PRU_ICSS_OCP_CLK", 0x30),
    RegLabel("CLKSEL_LCDC_PIXEL_CLK", 0x34),
    RegLabel("CLKSEL_WDT1_CLK", 0x38),
    RegLabel("CLKSEL_GPIO0_DBCLK", 0x3C)
    ]


# MPU
clock_module_mpu_regs = [
    RegLabel("CM_MPU_CLKSTCTRL",     0x00),
    RegLabel("CM_MPU_MPU_CLKCTRL",   0x04)
    ]

# DEVICE
clock_module_device_regs = [
        RegLabel("DM_CLKOUT_CTRL",       0x00)
        ]

# RTC
clock_module_rtc_regs = [
        RegLabel("CM_RTC_RTC_CLKCTRL",   0x00),
        RegLabel("CM_RTC_CLKSTCTRL",     0x04)
        ]

# GFX


# CEFUSE


# CONTROL MODULE REGISTERS

ctrl_module_regs = [
    RegLabel("control_revision",       0x0), 
    RegLabel("control_hwinfo",     0x4), 
    RegLabel("control_sysconfig",      0x10), 
    RegLabel("control_status",     0x40), 
    RegLabel("control_emif_sdram_config",      0x110), 
    RegLabel("core_sldo_ctrl",     0x428), 
    RegLabel("mpu_sldo_ctrl",      0x42C), 
    RegLabel("clk32kdivratio_ctrl",        0x444), 
    RegLabel("bandgap_ctrl",       0x448), 
    RegLabel("bandgap_trim",       0x44C), 
    RegLabel("pll_clkinpulow_ctrl",        0x458), 
    RegLabel("mosc_ctrl",      0x468), 
    RegLabel("deepsleep_ctrl",     0x470), 
    RegLabel("dpll_pwr_sw_status",     0x50C), 
    RegLabel("device_id",      0x600), 
    RegLabel("dev_feature",        0x604), 
    RegLabel("init_priority_0",        0x608), 
    RegLabel("init_priority_1",        0x60C), 
    RegLabel("tptc_cfg",       0x614), 
    RegLabel("usb_ctrl0",      0x620), 
    RegLabel("usb_sts0",       0x624), 
    RegLabel("usb_ctrl1",      0x628), 
    RegLabel("usb_sts1",       0x62C), 
    RegLabel("mac_id0_lo",     0x630), 
    RegLabel("mac_id0_hi",     0x634), 
    RegLabel("mac_id1_lo",     0x638), 
    RegLabel("mac_id1_hi",     0x63C), 
    RegLabel("dcan_raminit",       0x644), 
    RegLabel("usb_wkup_ctrl",      0x648), 
    RegLabel("gmii_sel",       0x650), 
    RegLabel("pwmss_ctrl",     0x664), 
    RegLabel("mreqprio_0",     0x670), 
    RegLabel("mreqprio_1",     0x674), 
    RegLabel("hw_event_sel_grp1",      0x690), 
    RegLabel("hw_event_sel_grp2",      0x694), 
    RegLabel("hw_event_sel_grp3",      0x698), 
    RegLabel("hw_event_sel_grp4",      0x69C), 
    RegLabel("smrt_ctrl",      0x6A0), 
    RegLabel("mpuss_hw_debug_sel",     0x6A4), 
    RegLabel("mpuss_hw_dbg_info",      0x6A8), 
    RegLabel("vdd_mpu_opp_050",        0x770), 
    RegLabel("vdd_mpu_opp_100",        0x774), 
    RegLabel("vdd_mpu_opp_120",        0x778), 
    RegLabel("vdd_mpu_opp_turbo",      0x77C), 
    RegLabel("vdd_core_opp_050",       0x7B8), 
    RegLabel("vdd_core_opp_100",       0x7BC), 
    RegLabel("bb_scale",       0x7D0), 
    RegLabel("usb_vid_pid",        0x7F4), 
    RegLabel("efuse_sma",      0x7FC), 
    RegLabel("conf_gpmc_ad0" ,     0x800), 
    RegLabel("conf_gpmc_ad1",      0x804), 
    RegLabel("conf_gpmc_ad2",      0x808), 
    RegLabel("conf_gpmc_ad3",      0x80C), 
    RegLabel("conf_gpmc_ad4",      0x810), 
    RegLabel("conf_gpmc_ad5",      0x814), 
    RegLabel("conf_gpmc_ad6",      0x818), 
    RegLabel("conf_gpmc_ad7",      0x81C), 
    RegLabel("conf_gpmc_ad8",      0x820), 
    RegLabel("conf_gpmc_ad9",      0x824), 
    RegLabel("conf_gpmc_ad10",     0x828), 
    RegLabel("conf_gpmc_ad11",     0x82C), 
    RegLabel("conf_gpmc_ad12",     0x830), 
    RegLabel("conf_gpmc_ad13",     0x834), 
    RegLabel("conf_gpmc_ad14",     0x838), 
    RegLabel("conf_gpmc_ad15",     0x83C), 
    RegLabel("conf_gpmc_a0",       0x840), 
    RegLabel("conf_gpmc_a1",       0x844), 
    RegLabel("conf_gpmc_a2",       0x848), 
    RegLabel("conf_gpmc_a3",       0x84C), 
    RegLabel("conf_gpmc_a4",       0x850), 
    RegLabel("conf_gpmc_a5",       0x854), 
    RegLabel("conf_gpmc_a6",       0x858), 
    RegLabel("conf_gpmc_a7",       0x85C), 
    RegLabel("conf_gpmc_a8",       0x860), 
    RegLabel("conf_gpmc_a9",       0x864), 
    RegLabel("conf_gpmc_a10",      0x868), 
    RegLabel("conf_gpmc_a11",      0x86C), 
    RegLabel("conf_gpmc_wait0",        0x870), 
    RegLabel("conf_gpmc_wpn",      0x874), 
    RegLabel("conf_gpmc_ben1",     0x878), 
    RegLabel("conf_gpmc_csn0",     0x87C), 
    RegLabel("conf_gpmc_csn1",     0x880), 
    RegLabel("conf_gpmc_csn2",     0x884), 
    RegLabel("conf_gpmc_csn3",     0x888), 
    RegLabel("conf_gpmc_clk",      0x88C), 
    RegLabel("conf_gpmc_advn_ale",     0x890), 
    RegLabel("conf_gpmc_oen_ren",      0x894), 
    RegLabel("conf_gpmc_wen",      0x898), 
    RegLabel("conf_gpmc_ben0_cle",     0x89C), 
    RegLabel("conf_lcd_data0",     0x8A0), 
    RegLabel("conf_lcd_data1",     0x8A4), 
    RegLabel("conf_lcd_data2",     0x8A8), 
    RegLabel("conf_lcd_data3",     0x8AC), 
    RegLabel("conf_lcd_data4",     0x8B0), 
    RegLabel("conf_lcd_data5",     0x8B4), 
    RegLabel("conf_lcd_data6",     0x8B8), 
    RegLabel("conf_lcd_data7",     0x8BC), 
    RegLabel("conf_lcd_data8",     0x8C0), 
    RegLabel("conf_lcd_data9",     0x8C4), 
    RegLabel("conf_lcd_data10",        0x8C8), 
    RegLabel("conf_lcd_data11",        0x8CC), 
    RegLabel("conf_lcd_data12",        0x8D0), 
    RegLabel("conf_lcd_data13",        0x8D4), 
    RegLabel("conf_lcd_data14",        0x8D8), 
    RegLabel("conf_lcd_data15",        0x8DC), 
    RegLabel("conf_lcd_vsync",     0x8E0), 
    RegLabel("conf_lcd_hsync",     0x8E4), 
    RegLabel("conf_lcd_pclk",      0x8E8), 
    RegLabel("conf_lcd_ac_bias_en",        0x8EC), 
    RegLabel("conf_mmc0_dat3",     0x8F0), 
    RegLabel("conf_mmc0_dat2",     0x8F4), 
    RegLabel("conf_mmc0_dat1",     0x8F8), 
    RegLabel("conf_mmc0_dat0",     0x8FC), 
    RegLabel("conf_mmc0_clk",      0x900), 
    RegLabel("conf_mmc0_cmd",      0x904), 
    RegLabel("conf_mii1_col",      0x908), 
    RegLabel("conf_mii1_crs",      0x90C), 
    RegLabel("conf_mii1_rx_er",        0x910), 
    RegLabel("conf_mii1_tx_en",        0x914), 
    RegLabel("conf_mii1_rx_dv",        0x918), 
    RegLabel("conf_mii1_txd3",     0x91C), 
    RegLabel("conf_mii1_txd2",     0x920), 
    RegLabel("conf_mii1_txd1",     0x924), 
    RegLabel("conf_mii1_txd0",     0x928), 
    RegLabel("conf_mii1_tx_clk",       0x92C), 
    RegLabel("conf_mii1_rx_clk",       0x930), 
    RegLabel("conf_mii1_rxd3",     0x934), 
    RegLabel("conf_mii1_rxd2",     0x938), 
    RegLabel("conf_mii1_rxd1",     0x93C), 
    RegLabel("conf_mii1_rxd0",     0x940), 
    RegLabel("conf_rmii1_ref_clk",     0x944), 
    RegLabel("conf_mdio",      0x948), 
    RegLabel("conf_mdc",       0x94C), 
    RegLabel("conf_spi0_sclk",     0x950), 
    RegLabel("conf_spi0_d0",       0x954), 
    RegLabel("conf_spi0_d1",       0x958), 
    RegLabel("conf_spi0_cs0",      0x95C), 
    RegLabel("conf_spi0_cs1",      0x960), 
    RegLabel("conf_ecap0_in_pwm0_out",     0x964), 
    RegLabel("conf_uart0_ctsn",        0x968), 
    RegLabel("conf_uart0_rtsn",        0x96C), 
    RegLabel("conf_uart0_rxd",     0x970), 
    RegLabel("conf_uart0_txd",     0x974), 
    RegLabel("conf_uart1_ctsn",        0x978), 
    RegLabel("conf_uart1_rtsn",        0x97C), 
    RegLabel("conf_uart1_rxd",     0x980), 
    RegLabel("conf_uart1_txd",     0x984), 
    RegLabel("conf_i2c0_sda",      0x988), 
    RegLabel("conf_i2c0_scl",      0x98C), 
    RegLabel("conf_mcasp0_aclkx",      0x990), 
    RegLabel("conf_mcasp0_fsx",        0x994), 
    RegLabel("conf_mcasp0_axr0",       0x998), 
    RegLabel("conf_mcasp0_ahclkr",     0x99C), 
    RegLabel("conf_mcasp0_aclkr",      0x9A0), 
    RegLabel("conf_mcasp0_fsr",        0x9A4), 
    RegLabel("conf_mcasp0_axr1",       0x9A8), 
    RegLabel("conf_mcasp0_ahclkx",     0x9AC), 
    RegLabel("conf_xdma_event_intr0",      0x9B0), 
    RegLabel("conf_xdma_event_intr1",      0x9B4), 
    RegLabel("conf_warmrstn",      0x9B8), 
    RegLabel("conf_nnmi",      0x9C0), 
    RegLabel("conf_tms",       0x9D0), 
    RegLabel("conf_tdi",       0x9D4), 
    RegLabel("conf_tdo",       0x9D8), 
    RegLabel("conf_tck",       0x9DC), 
    RegLabel("conf_trstn",     0x9E0), 
    RegLabel("conf_emu0",      0x9E4), 
    RegLabel("conf_emu1",      0x9E8), 
    RegLabel("conf_rtc_pwronrstn",     0x9F8), 
    RegLabel("conf_pmic_power_en",     0x9FC), 
    RegLabel("conf_ext_wakeup",        0xA00), 
    RegLabel("conf_usb0_drvvbus",      0xA1C), 
    RegLabel("conf_usb1_drvvbus",      0xA34), 
    RegLabel("cqdetect_status",        0xE00), 
    RegLabel("ddr_io_ctrl",        0xE04), 
    RegLabel("vtp_ctrl",       0xE0C), 
    RegLabel("vref_ctrl",      0xE14), 
    RegLabel("tpcc_evt_mux_0_3",       0xF90), 
    RegLabel("tpcc_evt_mux_4_7",       0xF94), 
    RegLabel("tpcc_evt_mux_8_11",      0xF98), 
    RegLabel("tpcc_evt_mux_12_15",     0xF9C), 
    RegLabel("tpcc_evt_mux_16_19",     0xFA0), 
    RegLabel("tpcc_evt_mux_20_23",     0xFA4), 
    RegLabel("tpcc_evt_mux_24_27",     0xFA8), 
    RegLabel("tpcc_evt_mux_28_31",     0xFAC), 
    RegLabel("tpcc_evt_mux_32_35",     0xFB0), 
    RegLabel("tpcc_evt_mux_36_39",     0xFB4), 
    RegLabel("tpcc_evt_mux_40_43",     0xFB8), 
    RegLabel("tpcc_evt_mux_44_47",     0xFBC), 
    RegLabel("tpcc_evt_mux_48_51",     0xFC0), 
    RegLabel("tpcc_evt_mux_52_55",     0xFC4), 
    RegLabel("tpcc_evt_mux_56_59",     0xFC8), 
    RegLabel("tpcc_evt_mux_60_63",     0xFCC), 
    RegLabel("timer_evt_capt",     0xFD0), 
    RegLabel("ecap_evt_capt",      0xFD4), 
    RegLabel("adc_evt_capt",       0xFD8), 
    RegLabel("reset_iso",      0x1000), 
    RegLabel("dpll_pwr_sw_ctrl",       0x1318), 
    RegLabel("ddr_cke_ctrl",       0x131C), 
    RegLabel("sma2",       0x1320), 
    RegLabel("m3_txev_eoi",        0x1324), 
    RegLabel("ipc_msg_reg0",       0x1328), 
    RegLabel("ipc_msg_reg1",       0x132C), 
    RegLabel("ipc_msg_reg2",       0x1330), 
    RegLabel("ipc_msg_reg3",       0x1334), 
    RegLabel("ipc_msg_reg4",       0x1338), 
    RegLabel("ipc_msg_reg5",       0x133C), 
    RegLabel("ipc_msg_reg6",       0x1340), 
    RegLabel("ipc_msg_reg7",       0x1344), 
    RegLabel("ddr_cmd0_ioctrl",        0x1404), 
    RegLabel("ddr_cmd1_ioctrl",        0x1408), 
    RegLabel("ddr_cmd2_ioctrl",        0x140C), 
    RegLabel("ddr_data0_ioctrl",       0x1440), 
    RegLabel("ddr_data1_ioctrl",       0x1444)
]

# UART REGISTERS
uart_regs = [
    RegLabel("THR",        0x0), 
    RegLabel("RHR",        0x0), 
    RegLabel("DLL",        0x0), 
    RegLabel("IER_IRDA",       0x4), 
    RegLabel("IER_CIR",        0x4), 
    RegLabel("IER_UART",       0x4), 
    RegLabel("DLH",        0x4), 
    RegLabel("EFR",        0x8), 
    RegLabel("IIR_UART",       0x8), 
    RegLabel("IIR_CIR",        0x8), 
    RegLabel("FCR",        0x8), 
    RegLabel("IIR_IRDA",       0x8), 
    RegLabel("LCR",        0xC), 
    RegLabel("MCR",        0x10), 
    RegLabel("XON1_ADDR1",     0x10), 
    RegLabel("XON2_ADDR2",     0x14), 
    RegLabel("LSR_CIR",        0x14), 
    RegLabel("LSR_IRDA",       0x14), 
    RegLabel("LSR_UART",       0x14), 
    RegLabel("TCR",        0x18), 
    RegLabel("MSR",        0x18), 
    RegLabel("XOFF1",      0x18), 
    RegLabel("SPR",        0x1C), 
    RegLabel("TLR",        0x1C), 
    RegLabel("XOFF2",      0x1C), 
    RegLabel("MDR1",       0x20), 
    RegLabel("MDR2",       0x24), 
    RegLabel("TXFLL",      0x28), 
    RegLabel("SFLSR",      0x28), 
    RegLabel("RESUME",     0x2C), 
    RegLabel("TXFLH",      0x2C), 
    RegLabel("RXFLL",      0x30), 
    RegLabel("SFREGL",     0x30), 
    RegLabel("SFREGH",     0x34), 
    RegLabel("RXFLH",      0x34), 
    RegLabel("BLR",        0x38), 
    RegLabel("UASR",       0x38), 
    RegLabel("ACREG",      0x3C), 
    RegLabel("SCR",        0x40), 
    RegLabel("SSR",        0x44), 
    RegLabel("EBLR",       0x48), 
    RegLabel("MVR",        0x50), 
    RegLabel("SYSC",       0x54), 
    RegLabel("SYSS",       0x58), 
    RegLabel("WER",        0x5C), 
    RegLabel("CFPS",       0x60), 
    RegLabel("RXFIFO_LVL",     0x64), 
    RegLabel("TXFIFO_LVL",     0x68), 
    RegLabel("IER2",       0x6C), 
    RegLabel("ISR2",       0x70), 
    RegLabel("FREQ_SEL",       0x74), 
    RegLabel("MDR3",       0x80), 
    RegLabel("TX_DMA_THRESHOLD",       0x84)
]

# USB REGISTERS
# USB Subsystem (0x4740_0000)
usb_subsys_regs = [
    RegLabel("REVRE",      0x0), 
    RegLabel("SYSCONFIG",      0x10), 
    RegLabel("IRQSTATRAW",     0x24), 
    RegLabel("IRQSTAT",        0x28), 
    RegLabel("IRQENABLER",     0x2C), 
    RegLabel("IRQCLEARR",      0x30), 
    RegLabel("IRQDMATHOLDTX00",        0x100), 
    RegLabel("IRQDMATHOLDTX01",        0x104), 
    RegLabel("IRQDMATHOLDTX02",        0x108), 
    RegLabel("IRQDMATHOLDTX03",        0x10C), 
    RegLabel("IRQDMATHOLDRX00",        0x110), 
    RegLabel("IRQDMATHOLDRX01",        0x114), 
    RegLabel("IRQDMATHOLDRX02",        0x118), 
    RegLabel("IRQDMATHOLDRX03",        0x11C), 
    RegLabel("IRQDMATHOLDTX10",        0x120), 
    RegLabel("IRQDMATHOLDTX11",        0x124), 
    RegLabel("IRQDMATHOLDTX12",        0x128), 
    RegLabel("IRQDMATHOLDTX13",        0x12C), 
    RegLabel("IRQDMATHOLDRX10",        0x130), 
    RegLabel("IRQDMATHOLDRX11",        0x134), 
    RegLabel("IRQDMATHOLDRX12",        0x138), 
    RegLabel("IRQDMATHOLDRX13",        0x13C), 
    RegLabel("IRQDMAENABLE0",      0x140), 
    RegLabel("IRQDMAENABLE1",      0x144), 
    RegLabel("IRQFRAMETHOLDTX00",      0x200), 
    RegLabel("IRQFRAMETHOLDTX01",      0x204), 
    RegLabel("IRQFRAMETHOLDTX02",      0x208), 
    RegLabel("IRQFRAMETHOLDTX03",      0x20C), 
    RegLabel("IRQFRAMETHOLDRX00",      0x210), 
    RegLabel("IRQFRAMETHOLDRX01",      0x214), 
    RegLabel("IRQFRAMETHOLDRX02",      0x218), 
    RegLabel("IRQFRAMETHOLDRX03",      0x21C), 
    RegLabel("IRQFRAMETHOLDTX10",      0x220), 
    RegLabel("IRQFRAMETHOLDTX11",      0x224), 
    RegLabel("IRQFRAMETHOLDTX12",      0x228), 
    RegLabel("IRQFRAMETHOLDTX13",      0x22C), 
    RegLabel("IRQFRAMETHOLDRX10",      0x230), 
    RegLabel("IRQFRAMETHOLDRX11",      0x234), 
    RegLabel("IRQFRAMETHOLDRX12",      0x238), 
    RegLabel("IRQFRAMETHOLDRX13" ,     0x23C), 
    RegLabel("IRQFRAMEENABLE0",        0x240), 
    RegLabel("IRQFRAMEENABLE1" ,       0x244)
]

# McSPI REGISTERS
mcspi_regs = [
    RegLabel("MCSPI_REVISION",     0x0), 
    RegLabel("MCSPI_SYSCONFIG",        0x110), 
    RegLabel("MCSPI_SYSSTATUS",        0x114), 
    RegLabel("MCSPI_IRQSTATUS",        0x118), 
    RegLabel("MCSPI_IRQENABLE",        0x11C), 
    RegLabel("MCSPI_SYST",     0x124), 
    RegLabel("MCSPI_MODULCTRL",        0x128), 
    RegLabel("MCSPI_CH0CONF",      0x12C), 
    RegLabel("MCSPI_CH0STAT",      0x130), 
    RegLabel("MCSPI_CH0CTRL",      0x134), 
    RegLabel("MCSPI_TX0",      0x138), 
    RegLabel("MCSPI_RX0",      0x13C), 
    RegLabel("MCSPI_CH1CONF",      0x140), 
    RegLabel("MCSPI_CH1STAT",      0x144), 
    RegLabel("MCSPI_CH1CTRL",      0x148), 
    RegLabel("MCSPI_TX1",      0x14C), 
    RegLabel("MCSPI_RX1",      0x150), 
    RegLabel("MCSPI_CH2CONF",      0x154), 
    RegLabel("MCSPI_CH2STAT",      0x158), 
    RegLabel("MCSPI_CH2CTRL",      0x15C), 
    RegLabel("MCSPI_TX2",      0x160), 
    RegLabel("MCSPI_RX2",      0x164), 
    RegLabel("MCSPI_CH3CONF",      0x168), 
    RegLabel("MCSPI_CH3STAT",      0x16C), 
    RegLabel("MCSPI_CH3CTRL",      0x170), 
    RegLabel("MCSPI_TX3",      0x174), 
    RegLabel("MCSPI_RX3",      0x178), 
    RegLabel("MCSPI_XFERLEVEL",        0x17C), 
    RegLabel("MCSPI_DAFTX",        0x180), 
    RegLabel("MCSPI_DAFRX",        0x1A0)
]

# GPIO REGISTERS (GPIO0, 0x44E0_7000) (GPIO1, 0x4804_C000) (GPIO2, 0x481A_C000) (GPIO3, 0x481A_E000)
gpio_regs = [
    RegLabel("GPIO_REVISION",      0x0), 
    RegLabel("GPIO_SYSCONFIG",     0x10), 
    RegLabel("GPIO_EOI",       0x20), 
    RegLabel("GPIO_IRQSTATUS_RAW_0",       0x24), 
    RegLabel("GPIO_IRQSTATUS_RAW_1",       0x28), 
    RegLabel("GPIO_IRQSTATUS_0",       0x2C), 
    RegLabel("GPIO_IRQSTATUS_1",       0x30), 
    RegLabel("GPIO_IRQSTATUS_SET_0",       0x34), 
    RegLabel("GPIO_IRQSTATUS_SET_1",       0x38), 
    RegLabel("GPIO_IRQSTATUS_CLR_0",       0x3C), 
    RegLabel("GPIO_IRQSTATUS_CLR_1",       0x40), 
    RegLabel("GPIO_IRQWAKEN_0",        0x44), 
    RegLabel("GPIO_IRQWAKEN_1",        0x48), 
    RegLabel("GPIO_SYSSTATUS",     0x114), 
    RegLabel("GPIO_CTRL",      0x130), 
    RegLabel("GPIO_OE",        0x134), 
    RegLabel("GPIO_DATAIN",        0x138), 
    RegLabel("GPIO_DATAOUT",       0x13C), 
    RegLabel("GPIO_LEVELDETECT0",      0x140), 
    RegLabel("GPIO_LEVELDETECT1",      0x144), 
    RegLabel("GPIO_RISINGDETECT",      0x148), 
    RegLabel("GPIO_FALLINGDETECT",     0x14C), 
    RegLabel("GPIO_DEBOUNCENABLE",     0x150), 
    RegLabel("GPIO_DEBOUNCINGTIME",        0x154), 
    RegLabel("GPIO_CLEARDATAOUT",      0x190), 
    RegLabel("GPIO_SETDATAOUT" ,       0x194)
]

# I2C REGISTERS
i2c_regs = [
    RegLabel("I2C_REVNB_LO",       0x0), 
    RegLabel("I2C_REVNB_HI",       0x4), 
    RegLabel("I2C_SYSC",       0x10), 
    RegLabel("I2C_IRQSTATUS_RAW",      0x24), 
    RegLabel("I2C_IRQSTATUS",      0x28), 
    RegLabel("I2C_IRQENABLE_SET",      0x2C), 
    RegLabel("I2C_IRQENABLE_CLR",      0x30), 
    RegLabel("I2C_WE",     0x34), 
    RegLabel("I2C_DMARXENABLE_SET",        0x38), 
    RegLabel("I2C_DMATXENABLE_SET",        0x3C), 
    RegLabel("I2C_DMARXENABLE_CLR",        0x40), 
    RegLabel("I2C_DMATXENABLE_CLR",        0x44), 
    RegLabel("I2C_DMARXWAKE_EN",       0x48), 
    RegLabel("I2C_DMATXWAKE_EN",       0x4C), 
    RegLabel("I2C_SYSS",       0x90), 
    RegLabel("I2C_BUF",        0x94), 
    RegLabel("I2C_CNT",        0x98), 
    RegLabel("I2C_DATA",       0x9C), 
    RegLabel("I2C_CON",        0xA4), 
    RegLabel("I2C_OA",     0xA8), 
    RegLabel("I2C_SA",     0xAC), 
    RegLabel("I2C_PSC",        0xB0), 
    RegLabel("I2C_SCLL",       0xB4), 
    RegLabel("I2C_SCLH",       0xB8), 
    RegLabel("I2C_SYSTEST",        0xBC), 
    RegLabel("I2C_BUFSTAT",        0xC0), 
    RegLabel("I2C_OA1",        0xC4), 
    RegLabel("I2C_OA2",        0xC8), 
    RegLabel("I2C_OA3",        0xCC), 
    RegLabel("I2C_ACTOA",      0xD0), 
    RegLabel("I2C_SBLOCK",     0xD4)
]

# TIMER REGISTERS
timer_regs = [
    RegLabel("TIDR",       0x0), 
    RegLabel("TIOCP_CFG",      0x10), 
    RegLabel("IRQ_EOI",        0x20), 
    RegLabel("IRQSTATUS_RAW",      0x24), 
    RegLabel("IRQSTATUS",      0x28), 
    RegLabel("IRQENABLE_SET",      0x2C), 
    RegLabel("IRQENABLE_CLR",      0x30), 
    RegLabel("IRQWAKEEN",      0x34), 
    RegLabel("TCLR",       0x38), 
    RegLabel("TCRR",       0x3C), 
    RegLabel("TLDR",       0x40), 
    RegLabel("TTGR",       0x44), 
    RegLabel("TWPS",       0x48), 
    RegLabel("TMAR",       0x4C), 
    RegLabel("TCAR1",      0x50), 
    RegLabel("TSICR",      0x54), 
    RegLabel("TCAR2",      0x58)
]

# WATCHDOG REGISTERS
watchdog_regs = [
    RegLabel("WDT_WIDR",       0x0), 
    RegLabel("WDT_WDSC",       0x10), 
    RegLabel("WDT_WDST",       0x14), 
    RegLabel("WDT_WISR",       0x18), 
    RegLabel("WDT_WIER",       0x1C), 
    RegLabel("WDT_WCLR",       0x24), 
    RegLabel("WDT_WCRR",       0x28), 
    RegLabel("WDT_WLDR",       0x2C), 
    RegLabel("WDT_WTGR",       0x30), 
    RegLabel("WDT_WWPS",       0x34), 
    RegLabel("WDT_WDLY",       0x44), 
    RegLabel("WDT_WSPR",       0x48), 
    RegLabel("WDT_WIRQSTATRAW",        0x54), 
    RegLabel("WDT_WIRQSTAT",       0x58), 
    RegLabel("WDT_WIRQENSET",      0x5C), 
    RegLabel("WDT_WIRQENCLR",      0x60)
]

# EDMA3
edma3_regs = [
    RegLabel("PID",        0x0), 
    RegLabel("CCCFG",      0x4), 
    RegLabel("SYSCONFIG",      0x10), 
#100h to 1FCh DCHMAP_0 to DCHMAP_63 DMA Channel Mapping Registers 0-63 Section 12.4.1.4
#200h to 21Ch QCHMAP_0 to QCHMAP_7 QDMA Channel Mapping Registers 0-7 Section 12.4.1.5
#240h to 25Ch DMAQNUM_0 to DMAQNUM_7 DMA Queue Number Registers 0-7 Section 12.4.1.6
    RegLabel("QDMAQNUM",       0x260), 
    RegLabel("QUEPRI",     0x284), 
    RegLabel("EMR",        0x300), 
    RegLabel("EMRH",       0x304), 
    RegLabel("EMCR",       0x308), 
    RegLabel("EMCRH",      0x30C), 
    RegLabel("QEMR",       0x310), 
    RegLabel("QEMCR",      0x314), 
    RegLabel("CCERR",      0x318), 
    RegLabel("CCERRCLR",       0x31C), 
    RegLabel("EEVAL",      0x320), 
    RegLabel("DRAE0",      0x340), 
    RegLabel("DRAEH0",     0x344), 
    RegLabel("DRAE1",      0x348), 
    RegLabel("DRAEH1",     0x34C), 
    RegLabel("DRAE2",      0x350), 
    RegLabel("DRAEH2",     0x354), 
    RegLabel("DRAE3",      0x358), 
    RegLabel("DRAEH3",     0x35C), 
    RegLabel("DRAE4",      0x360), 
    RegLabel("DRAEH4",     0x364), 
    RegLabel("DRAE5",      0x368), 
    RegLabel("DRAEH5",     0x36C), 
    RegLabel("DRAE6",      0x370), 
    RegLabel("DRAEH6",     0x374), 
    RegLabel("DRAE7",      0x378), 
    RegLabel("DRAEH7",     0x37C), 
    RegLabel("to",     0x380), 
    RegLabel("Q0E0",       0x400), 
    RegLabel("Q0E1",       0x404), 
    RegLabel("Q0E2",       0x408), 
    RegLabel("Q0E3",       0x40C), 
    RegLabel("Q0E4",       0x410), 
    RegLabel("Q0E5",       0x414), 
    RegLabel("Q0E6",       0x418), 
    RegLabel("Q0E7",       0x41C), 
    RegLabel("Q0E8",       0x420), 
    RegLabel("Q0E9",       0x424), 
    RegLabel("Q0E10",      0x428), 
    RegLabel("Q0E11",      0x42C), 
    RegLabel("Q0E12",      0x430), 
    RegLabel("Q0E13",      0x434), 
    RegLabel("Q0E14",      0x438), 
    RegLabel("Q0E15",      0x43C), 
    RegLabel("Q1E0",       0x440), 
    RegLabel("Q1E1",       0x444), 
    RegLabel("Q1E2",       0x448), 
    RegLabel("Q1E3",       0x44C), 
    RegLabel("Q1E4",       0x450), 
    RegLabel("Q1E5",       0x454), 
    RegLabel("Q1E6",       0x458), 
    RegLabel("Q1E7",       0x45C), 
    RegLabel("Q1E8",       0x460), 
    RegLabel("Q1E9",       0x464), 
    RegLabel("Q1E10",      0x468), 
    RegLabel("Q1E11",      0x46C), 
    RegLabel("Q1E12",      0x470), 
    RegLabel("Q1E13",      0x474), 
    RegLabel("Q1E14",      0x478), 
    RegLabel("Q1E15",      0x47C), 
    RegLabel("Q2E0",       0x480), 
    RegLabel("Q2E1",       0x484), 
    RegLabel("Q2E2",       0x488), 
    RegLabel("Q2E3",       0x48C), 
    RegLabel("Q2E4",       0x490), 
    RegLabel("Q2E5",       0x494), 
    RegLabel("Q2E6",       0x498), 
    RegLabel("Q2E7",       0x49C), 
    RegLabel("Q2E8",       0x4A0), 
    RegLabel("Q2E9",       0x4A4), 
    RegLabel("Q2E10",      0x4A8), 
    RegLabel("Q2E11",      0x4AC), 
    RegLabel("Q2E12",      0x4B0), 
    RegLabel("Q2E13",      0x4B4), 
    RegLabel("Q2E14",      0x4B8), 
    RegLabel("Q2E15",      0x4BC), 
    RegLabel("to",     0x600), 
    RegLabel("QWMTHRA",        0x620), 
    RegLabel("CCSTAT",     0x640), 
    RegLabel("MPFAR",      0x800), 
    RegLabel("MPFSR",      0x804), 
    RegLabel("MPFCR",      0x808), 
    RegLabel("MPPAG",      0x80C), 
    RegLabel("to",     0x810), 
    RegLabel("ER",     0x1000), 
    RegLabel("ERH",        0x1004), 
    RegLabel("ECR",        0x1008), 
    RegLabel("ECRH",       0x100C), 
    RegLabel("ESR",        0x1010), 
    RegLabel("ESRH",       0x1014), 
    RegLabel("CER",        0x1018), 
    RegLabel("CERH",       0x101C), 
    RegLabel("EER",        0x1020), 
    RegLabel("EERH",       0x1024), 
    RegLabel("EECR",       0x1028), 
    RegLabel("EECRH",      0x102C), 
    RegLabel("EESR",       0x1030), 
    RegLabel("EESRH",      0x1034), 
    RegLabel("SER",        0x1038), 
    RegLabel("SERH",       0x103C), 
    RegLabel("SECR",       0x1040), 
    RegLabel("SECRH",      0x1044), 
    RegLabel("IER",        0x1050), 
    RegLabel("IERH",       0x1054), 
    RegLabel("IECR",       0x1058), 
    RegLabel("IECRH",      0x105C), 
    RegLabel("IESR",       0x1060), 
    RegLabel("IESRH",      0x1064), 
    RegLabel("IPR",        0x1068), 
    RegLabel("IPRH",       0x106C), 
    RegLabel("ICR",        0x1070), 
    RegLabel("ICRH",       0x1074), 
    RegLabel("IEVAL",      0x1078), 
    RegLabel("QER",        0x1080), 
    RegLabel("QEER",       0x1084), 
    RegLabel("QEECR",      0x1088), 
    RegLabel("QEESR",      0x108C), 
    RegLabel("QSER",       0x1090), 
    RegLabel("QSECR",      0x1094)
]

# TOUCHSCREEN CONTROLLER REGISTERS
touchscreen_ctrl_regs = [
    RegLabel("REVISION",       0x0), 
    RegLabel("SYSCONFIG",      0x10), 
    RegLabel("IRQSTATUS_RAW",      0x24), 
    RegLabel("IRQSTATUS",      0x28), 
    RegLabel("IRQENABLE_SET",      0x2C), 
    RegLabel("IRQENABLE_CLR",      0x30), 
    RegLabel("IRQWAKEUP",      0x34), 
    RegLabel("DMAENABLE_SET",      0x38), 
    RegLabel("DMAENABLE_CLR",      0x3C), 
    RegLabel("CTRL",       0x40), 
    RegLabel("ADCSTAT",        0x44), 
    RegLabel("ADCRANGE",       0x48), 
    RegLabel("ADC_CLKDIV",     0x4C), 
    RegLabel("ADC_MISC",       0x50), 
    RegLabel("STEPENABLE",     0x54), 
    RegLabel("IDLECONFIG",     0x58), 
    RegLabel("TS_CHARGE_STEPCONFIG",       0x5C), 
    RegLabel("TS_CHARGE_DELAY",        0x60), 
    RegLabel("STEPCONFIG1",        0x64), 
    RegLabel("STEPDELAY1",     0x68), 
    RegLabel("STEPCONFIG2",        0x6C), 
    RegLabel("STEPDELAY2",     0x70), 
    RegLabel("STEPCONFIG3",        0x74), 
    RegLabel("STEPDELAY3",     0x78), 
    RegLabel("STEPCONFIG4",        0x7C), 
    RegLabel("STEPDELAY4",     0x80), 
    RegLabel("STEPCONFIG5",        0x84), 
    RegLabel("STEPDELAY5",     0x88), 
    RegLabel("STEPCONFIG6",        0x8C), 
    RegLabel("STEPDELAY6",     0x90), 
    RegLabel("STEPCONFIG7",        0x94), 
    RegLabel("STEPDELAY7",     0x98), 
    RegLabel("STEPCONFIG8",        0x9C), 
    RegLabel("STEPDELAY8",     0xA0), 
    RegLabel("STEPCONFIG9",        0xA4), 
    RegLabel("STEPDELAY9",     0xA8), 
    RegLabel("STEPCONFIG10",       0xAC), 
    RegLabel("STEPDELAY10",        0xB0), 
    RegLabel("STEPCONFIG11",       0xB4), 
    RegLabel("STEPDELAY11",        0xB8)
]

# LCD CONTROLLER
lcd_ctrl_regs = [
    RegLabel("PID",        0x0), 
    RegLabel("CTRL",       0x4), 
    RegLabel("LIDD_CTRL",      0xC), 
    RegLabel("LIDD_CS0_CONF",      0x10), 
    RegLabel("LIDD_CS0_ADDR",      0x14), 
    RegLabel("LIDD_CS0_DATA",      0x18), 
    RegLabel("LIDD_CS1_CONF",      0x1C), 
    RegLabel("LIDD_CS1_ADDR",      0x20), 
    RegLabel("LIDD_CS1_DATA",      0x24), 
    RegLabel("RASTER_CTRL",        0x28), 
    RegLabel("RASTER_TIMING_0",        0x2C), 
    RegLabel("RASTER_TIMING_1",        0x30), 
    RegLabel("RASTER_TIMING_2",        0x34), 
    RegLabel("RASTER_SUBPANEL",        0x38), 
    RegLabel("RASTER_SUBPANEL2",       0x3C), 
    RegLabel("LCDDMA_CTRL",        0x40), 
    RegLabel("LCDDMA_FB0_BASE",        0x44), 
    RegLabel("LCDDMA_FB0_CEILING",     0x48), 
    RegLabel("LCDDMA_FB1_BASE",        0x4C), 
    RegLabel("LCDDMA_FB1_CEILING",     0x50), 
    RegLabel("SYSCONFIG",      0x54), 
    RegLabel("IRQSTATUS_RAW",      0x58), 
    RegLabel("IRQSTATUS",      0x5C), 
    RegLabel("IRQENABLE_SET",      0x60), 
    RegLabel("IRQENABLE_CLEAR",        0x64), 
    RegLabel("CLKC_ENABLE",        0x6C), 
    RegLabel("CLKC_RESET",     0x70)
]

# ETHERNET SUBSYSTEM REGISTERS
eth_subsys_regs = [
    RegLabel("IDVER",      0x0), 
    RegLabel("CONTROL",        0x8), 
    RegLabel("PRESCALE",       0x10), 
    RegLabel("UNKNOWN_VLAN",       0x18), 
    RegLabel("TBLCTL",     0x20), 
    RegLabel("TBLW2",      0x34), 
    RegLabel("TBLW1",      0x38), 
    RegLabel("TBLW0",      0x3C), 
    RegLabel("PORTCTL0",       0x40), 
    RegLabel("PORTCTL1",       0x44), 
    RegLabel("PORTCTL2",       0x48), 
    RegLabel("PORTCTL3",       0x4C), 
    RegLabel("PORTCTL4",       0x50), 
    RegLabel("PORTCTL5",       0x54)
]

# RTC REGISTERS
rtc_regs = [
    RegLabel("SECONDS_REG",        0x0), 
    RegLabel("MINUTES_REG",        0x4), 
    RegLabel("HOURS_REG",      0x8), 
    RegLabel("DAYS_REG",       0xC), 
    RegLabel("MONTHS_REG",     0x10), 
    RegLabel("YEARS_REG",      0x14), 
    RegLabel("WEEKS_REG",      0x18), 
    RegLabel("ALARM_SECONDS_REG",      0x20), 
    RegLabel("ALARM_MINUTES_REG",      0x24), 
    RegLabel("ALARM_HOURS_REG",        0x28), 
    RegLabel("ALARM_DAYS_REG",     0x2C), 
    RegLabel("ALARM_MONTHS_REG",       0x30), 
    RegLabel("ALARM_YEARS_REG",        0x34), 
    RegLabel("RTC_CTRL_REG",       0x40), 
    RegLabel("RTC_STATUS_REG",     0x44), 
    RegLabel("RTC_INTERRUPTS_REG",     0x48), 
    RegLabel("RTC_COMP_LSB_REG",       0x4C), 
    RegLabel("RTC_COMP_MSB_REG",       0x50), 
    RegLabel("RTC_OSC_REG",        0x54), 
    RegLabel("RTC_SCRATCH0_REG",       0x60), 
    RegLabel("RTC_SCRATCH1_REG",       0x64), 
    RegLabel("RTC_SCRATCH2_REG",       0x68), 
    RegLabel("KICK0R",     0x6C), 
    RegLabel("KICK1R",     0x70), 
    RegLabel("RTC_REVISION",       0x74), 
    RegLabel("RTC_SYSCONFIG",      0x78), 
    RegLabel("RTC_IRQWAKEEN",      0x7C), 
    RegLabel("ALARM2_SECONDS_REG",     0x80), 
    RegLabel("ALARM2_MINUTES_REG",     0x84), 
    RegLabel("ALARM2_HOURS_REG",       0x88), 
    RegLabel("ALARM2_DAYS_REG",        0x8C), 
    RegLabel("ALARM2_MONTHS_REG",      0x90), 
    RegLabel("ALARM2_YEARS_REG",       0x94), 
    RegLabel("RTC_PMIC",       0x98), 
    RegLabel("RTC_DEBOUNCE",       0x9C)
]

# CAN REGISTERS
can_regs = [
    RegLabel("CTL",        0x0), 
    RegLabel("ES",     0x4), 
    RegLabel("ERRC",       0x8), 
    RegLabel("BTR",        0xC), 
    RegLabel("INT",        0x10), 
    RegLabel("TEST",       0x14), 
    RegLabel("PERR",       0x1C), 
    RegLabel("ABOTR",      0x80), 
    RegLabel("TXRQ_X",     0x84), 
    RegLabel("TXRQ12",     0x88), 
    RegLabel("TXRQ34",     0x8C), 
    RegLabel("TXRQ56",     0x90), 
    RegLabel("TXRQ78",     0x94), 
    RegLabel("NWDAT_X",        0x98), 
    RegLabel("NWDAT12",        0x9C), 
    RegLabel("NWDAT34",        0xA0), 
    RegLabel("NWDAT56",        0xA4), 
    RegLabel("NWDAT78",        0xA8), 
    RegLabel("INTPND_X",       0xAC), 
    RegLabel("INTPND12",       0xB0), 
    RegLabel("INTPND34",       0xB4), 
    RegLabel("INTPND56",       0xB8), 
    RegLabel("INTPND78",       0xBC), 
    RegLabel("MSGVAL_X",       0xC0), 
    RegLabel("MSGVAL12",       0xC4), 
    RegLabel("MSGVAL34",       0xC8), 
    RegLabel("MSGVAL56",       0xCC), 
    RegLabel("MSGVAL78",       0xD0), 
    RegLabel("INTMUX12",       0xD8), 
    RegLabel("INTMUX34",       0xDC), 
    RegLabel("INTMUX56",       0xE0), 
    RegLabel("INTMUX78",       0xE4), 
    RegLabel("IF1CMD",     0x100), 
    RegLabel("IF1MSK",     0x104), 
    RegLabel("IF1ARB",     0x108), 
    RegLabel("IF1MCTL",        0x10C), 
    RegLabel("IF1DATA",        0x110), 
    RegLabel("IF1DATB",        0x114), 
    RegLabel("IF2CMD",     0x120), 
    RegLabel("IF2MSK",     0x124), 
    RegLabel("IF2ARB",     0x128), 
    RegLabel("IF2MCTL",        0x12C), 
    RegLabel("IF2DATA",        0x130), 
    RegLabel("IF2DATB",        0x134), 
    RegLabel("IF3OBS",     0x140), 
    RegLabel("IF3MSK",     0x144), 
    RegLabel("IF3ARB",     0x148), 
    RegLabel("IF3MCTL",        0x14C), 
    RegLabel("IF3DATA",        0x150), 
    RegLabel("IF3DATB",        0x154), 
    RegLabel("IF3UPD12",       0x160), 
    RegLabel("IF3UPD34",       0x164), 
    RegLabel("IF3UPD56",       0x168), 
    RegLabel("IF3UPD78",       0x16C), 
    RegLabel("TIOC",       0x1E0), 
    RegLabel("RIOC",       0x1E4)
]



mem_regions = [
#    AM335xMemRegion("Secure Boot ROM Mirror", 0x00000000, 0x1FFFF,  True,False,False),
#    AM335xMemRegion("Public Boot ROM Mirror", 0x00020000, 0xBFFF,   True,False,False),
#    AM335xMemRegion("Public Boot ROM",   0x40020000, 0xBFFF,        True,False,False),
#    AM335xMemRegion("Secure Boot ROM",   0x40000000, 0x1FFFF,       True,False,False),
#    AM335xMemRegion("L3 OCMC0",          0x40300000, 0x10000,       True,True,True),
    AM335xMemRegion("McASP0 Data",       0x46000000, 0x3FFFFF,      True,True,False),
    AM335xMemRegion("McASP1 Data",       0x46400000, 0x3FFFFF,      True,True,False),
    AM335xMemRegion("USBSS",             0x47400000, 0xFFF,         True,True,False,usb_subsys_regs),
    AM335xMemRegion("USB0",              0x47401000, 0x2FF,         True,True,False),
    AM335xMemRegion("USB0_PHY",          0x47401300, 0x0FF,         True,True,False),
    AM335xMemRegion("USB0 Core",         0x47401400, 0x3FF,         True,True,False),
    AM335xMemRegion("USB1",              0x47401800, 0x2FF,         True,True,False),
    AM335xMemRegion("USB1_PHY",          0x47401B00, 0x0FF,         True,True,False),
    AM335xMemRegion("USB1 Core",         0x47401C00, 0x3FF,         True,True,False),
    AM335xMemRegion("USB CPPI DMA Controller",0x47402000, 0xFFF,    True,True,False),
    AM335xMemRegion("USB CPPI DMA Scheduler",0x47403000, 0xFFF,     True,True,False),
    AM335xMemRegion("USB Queue Manager", 0x47404000, 0x3FFF,        True,True,False),
    AM335xMemRegion("MMCHS2",            0x47810000, 0xFFF,         True,True,False,mmc_regs),
    #AM335xMemRegion("L4_PER",            0x48000000, 0x48FFFFFF,     True,True,False),
    AM335xMemRegion("TPCC (EDMA3CC)",    0x49000000, 0xFFFFF,       True,True,False),
    AM335xMemRegion("TPTC0 (EDMA3TC0)",  0x49800000, 0xFFFFF,       True,True,False),
    AM335xMemRegion("TPTC1 (EDMA3TC1)",  0x49900000, 0xFFFFF,       True,True,False),
    AM335xMemRegion("TPTC2 (EDMA3TC2",   0x49A00000, 0xFFFFF,       True,True,False),
    #AM335xMemRegion("L4_FAST",           0x4A000000, 0xFFFFFF,     True,True,False),
    AM335xMemRegion("DebugSS_ETM",       0x4B140000, 0xFFF,         True,True,False),
    AM335xMemRegion("DebugSS_Debug",     0x4B141000, 0xFFF,         True,True,False),
    AM335xMemRegion("DebugSS_CTI",       0x4B142000, 0xFFF,         True,True,False),
    AM335xMemRegion("DebugSS_ICE",       0x4B143000, 0xFFF,         True,True,False),
    AM335xMemRegion("DebugSS_DRM",       0x4B160000, 0xFFF,         True,True,False),
    AM335xMemRegion("DebugSS_ETB",       0x4B162000, 0xFFF,         True,True,False),
    AM335xMemRegion("EMIF0",             0x4C000000, 0xFFFFFF,     True,True,False),
    AM335xMemRegion("GPMC",              0x50000000, 0xFFFFFF,     True,True,False),
    AM335xMemRegion("ADC_TSC DMA",       0x54C00000, 0x3FFFFF,     True,True,False),
    AM335xMemRegion("SGX530",            0x56000000, 0xFFFFFF,     True,True,False),
    #AM335xMemRegion("EMIF0 SDRAM",       0x80000000, 0xBFFFFFFF,     True,True,False),
    AM335xMemRegion("L4_WKUP configuration AP", 0x44C00000, 0x7FF, True,True,False),
    AM335xMemRegion("L4_WKUP configuration LA", 0x44C00800, 0x7FF, True,True,False),
    AM335xMemRegion("L4_WKUP configuration IP0",0x44C01000, 0x3FF, True,True,False),
    AM335xMemRegion("L4_WKUP configuration IP1",0x44C01400, 0x3FF, True,True,False),
    AM335xMemRegion("CM_PER",            0x44E00000, 0x3FF,    True,True,False,clock_module_periph_regs),
    AM335xMemRegion("CM_WKUP",           0x44E00400, 0x100,    True,True,False,clock_module_wkup_regs),
    AM335xMemRegion("CM_DPLL",           0x44E00500, 0x100,    True,True,False,clock_module_dpll_regs),
    AM335xMemRegion("CM_MPU",            0x44E00600, 0x100,    True,True,False,clock_module_mpu_regs),
    AM335xMemRegion("CM_DEVICE",         0x44E00700, 0x100,    True,True,False,clock_module_device_regs),
    AM335xMemRegion("CM_RTC",            0x44E00800, 0x100,    True,True,False,clock_module_rtc_regs),
    AM335xMemRegion("CM_GFX",            0x44E00900, 0x100,    True,True,False),
    AM335xMemRegion("CM_CEFUSE",         0x44E00A00, 0x100,    True,True,False),
    AM335xMemRegion("PRM_IRQ",           0x44E00B00, 0x100,    True,True,False),
    AM335xMemRegion("PRM_PER",           0x44E00C00, 0x100,    True,True,False),
    AM335xMemRegion("PRM_WKUP",          0x44E00D00, 0x100,    True,True,False),
    AM335xMemRegion("PRM_MPU",           0x44E00E00, 0x100,    True,True,False),
    AM335xMemRegion("PRM_DEV",           0x44E00F00, 0x100,    True,True,False),
    AM335xMemRegion("PRM_RTC",           0x44E01000, 0x100,    True,True,False),
    AM335xMemRegion("PRM_GFX",           0x44E01100, 0x100,    True,True,False),
    AM335xMemRegion("PRM_CEFUSE",        0x44E01200, 0x100,    True,True,False),
    AM335xMemRegion("DMTIMER0",          0x44E05000, 0xFFF,    True,True,False),
    AM335xMemRegion("GPIO0",             0x44E07000, 0xFFF,    True,True,False,gpio_regs),
    AM335xMemRegion("UART0",             0x44E09000, 0xFFF,    True,True,False,uart_regs),
    AM335xMemRegion("I2C0",              0x44E0B000, 0xFFF,    True,True,False,i2c_regs),
    AM335xMemRegion("ADC_TSC",           0x44E0D000, 0x1FFF,   True,True,False),
    AM335xMemRegion("Control Module",    0x44E10000, 0x1448 ,  True,True,False,ctrl_module_regs),
    AM335xMemRegion("DDR2/3/mDDR PHY",   0x44E12000, 0x3FF,    True,True,False),
    AM335xMemRegion("DMTIMER1_1MS",      0x44E31000, 0xFFF,    True,True,False),
    AM335xMemRegion("WDT1",              0x44E35000, 0xFFF,    True,True,False,watchdog_regs),
    AM335xMemRegion("SmartReflex0",      0x44E37000, 0xFFF,    True,True,False),
    AM335xMemRegion("SmartReflex1",      0x44E39000, 0xFFF,    True,True,False),
    AM335xMemRegion("RTCSS",             0x44E3E000, 0xFFF,    True,True,False,rtc_regs),
    AM335xMemRegion("DebugSS Instrumentation and HWMaster1 Port", 0x44E40000, 0x3FFFF,  True,True,False),
    AM335xMemRegion("UART1",             0x48022000, 0xFFF ,  True,True,False,uart_regs),
    AM335xMemRegion("UART2",             0x48024000, 0xFFF ,  True,True,False,uart_regs),
    AM335xMemRegion("I2C1",              0x4802A000, 0xFFF ,  True,True,False,i2c_regs),
    AM335xMemRegion("McSPI0",            0x48030000, 0xFFF ,  True,True,False,mcspi_regs),
    AM335xMemRegion("McASP0 CFG",        0x48038000, 0x1FFF ,  True,True,False),
    AM335xMemRegion("McASP1 CFG",        0x4803C000, 0x1FFF ,  True,True,False),
    AM335xMemRegion("DMTIMER2",          0x48040000, 0xFFF ,  True,True,False,timer_regs),
    AM335xMemRegion("DMTIMER3",          0x48042000, 0xFFF ,  True,True,False,timer_regs),
    AM335xMemRegion("DMTIMER4",          0x48044000, 0xFFF ,  True,True,False,timer_regs),
    AM335xMemRegion("DMTIMER5",          0x48046000, 0xFFF ,  True,True,False,timer_regs),
    AM335xMemRegion("DMTIMER6",          0x48048000, 0xFFF ,  True,True,False,timer_regs),
    AM335xMemRegion("DMTIMER6 L4 Interconnect", 0x48049000, 0xFFF ,  True,True,False),
    AM335xMemRegion("DMTIMER7",          0x4804A000, 0xFFF ,  True,True,False,timer_regs),
    AM335xMemRegion("GPIO1",             0x4804C000, 0xFFF ,  True,True,False,gpio_regs),
    AM335xMemRegion("MMCHS0",            0x48060000, 0xFFF ,  True,True,False,mmc_regs),
    AM335xMemRegion("ELM",               0x48080000, 0xFFFF ,  True,True,False),
    AM335xMemRegion("Mailbox 0",         0x480C8000, 0xFFF,  True,True,False),
    AM335xMemRegion("Spinlock",          0x480CA000, 0xFFF,  True,True,False),
    AM335xMemRegion("OCP Watchpoint",    0x4818C000, 0xFFF,  True,True,False),
    AM335xMemRegion("I2C2",              0x4819C000, 0xFFF,  True,True,False,i2c_regs),
    AM335xMemRegion("McSPI1",            0x481A0000, 0xFFF,  True,True,False,mcspi_regs),
    AM335xMemRegion("UART3",             0x481A6000, 0xFFF,  True,True,False,uart_regs),
    AM335xMemRegion("UART4",             0x481A8000, 0xFFF,  True,True,False,uart_regs),
    AM335xMemRegion("UART5",             0x481AA000, 0xFFF,  True,True,False,uart_regs),
    AM335xMemRegion("GPIO2",             0x481AC000, 0xFFF,  True,True,False,gpio_regs),
    AM335xMemRegion("GPIO3",             0x481AE000, 0xFFF,  True,True,False,gpio_regs),
    AM335xMemRegion("DCAN0",             0x481CC000, 0x1FFF,  True,True,False,can_regs),
    AM335xMemRegion("DCAN1",             0x481D0000, 0x1FFF,  True,True,False,can_regs),
    AM335xMemRegion("MMCHS1",            0x481D8000, 0xFFF,  True,True,False,mmc_regs),
    AM335xMemRegion("INTCPS",            0x48200000, 0xFFF,  True,True,False,interrupt_ctl_regs),
    AM335xMemRegion("MPUSS config register", 0x48240000, 0xFFF,  True,True,False),
    AM335xMemRegion("PWM Subsystem 0",   0x48300000, 0xFF,  True,True,False),
    AM335xMemRegion("eCAP0",             0x48300100, 0x7F,  True,True,False),
    AM335xMemRegion("eQEP0",             0x48300180, 0x7F,  True,True,False),
    AM335xMemRegion("ePWM0",             0x48300200, 0x5F,  True,True,False),
    AM335xMemRegion("PWM Subsystem 1",   0x48302000, 0xFF,  True,True,False),
    AM335xMemRegion("eCAP1",             0x48302100, 0x7F,  True,True,False),
    AM335xMemRegion("eQEP1",             0x48302180, 0x7F,  True,True,False),
    AM335xMemRegion("ePWM1",             0x48302200, 0x5F,  True,True,False),
    AM335xMemRegion("PWM Subsystem 2",   0x48304000, 0xFF,      True,True,False),
    AM335xMemRegion("eCAP2",             0x48304100, 0x7F,      True,True,False),
    AM335xMemRegion("eQEP2",             0x48304180, 0x7F,      True,True,False),
    AM335xMemRegion("ePWM2",             0x48304200, 0x5F,      True,True,False),
    AM335xMemRegion("LCD Controller",    0x4830E000, 0xFFF,     True,True,False,lcd_ctrl_regs),
    AM335xMemRegion("L4_Fast configuration AP", 0x4A000000, 0x7FF,  True,True,False),
    AM335xMemRegion("L4_Fast configuration LA", 0x4A000800, 0x7FF,  True,True,False),
    AM335xMemRegion("L4_Fast configuration IP0", 0x4A001000, 0x3FF,  True,True,False),
    #AM335xMemRegion("CPSW_SS",           0x4A100000, 0x7FFF,    True,True,False),
    AM335xMemRegion("CPSW_PORT",         0x4A100100, 0x6FF ,    True,True,False),
    AM335xMemRegion("CPSW_CPDMA",        0x4A100800, 0xFF ,     True,True,False),
    AM335xMemRegion("CPSW_STATS",        0x4A100900, 0xFF ,     True,True,False),
    AM335xMemRegion("CPSW_STATERAM",     0x4A100A00, 0x1FF ,    True,True,False),
    AM335xMemRegion("CPSW_CPTS",         0x4A100C00, 0xFF ,     True,True,False),
    AM335xMemRegion("CPSW_ALE",          0x4A100D00, 0x7F ,     True,True,False),
    AM335xMemRegion("CPSW_SL1",          0x4A100D80, 0x3F ,     True,True,False),
    AM335xMemRegion("CPSW_SL2",          0x4A100DC0, 0x3F ,     True,True,False),
    AM335xMemRegion("MDIO",              0x4A101000, 0xFF ,     True,True,False),
    AM335xMemRegion("CPSW_WR",           0x4A101200, 0xDFF ,    True,True,False),
    AM335xMemRegion("CPPI_RAM",          0x4A102000, 0x1FFF,    True,True,False),
    AM335xMemRegion("PRU_ICSS",          0x4A300000, 0x7FFFF,   True,True,False)
]

listing = currentProgram.getListing()
symtable = currentProgram.getSymbolTable()
dtypemgr = currentProgram.getDataTypeManager()
addr_space = currentProgram.getAddressFactory().getDefaultAddressSpace()

namespace = symtable.getNamespace("Peripherals", None)

if not namespace:
    namespace = currentProgram.getSymbolTable().createNameSpace(None, "Peripherals", SourceType.ANALYSIS)

""" 
MEMORY MAPPING:
    The TRM provides memory regions for each register block, with a region size. These regions
    contain registers of the default size of 4 bytes (32 bit). The register lists below store each
    register with its offset. To create a struct for the register blocks, provide each register with
    its offset in the struct. 
"""

for mem in mem_regions:
    addr = addr_space.getAddress(mem.base_addr)
    t = currentProgram.memory.createUninitializedBlock(mem.name,addr,mem.sz,False)
    t.setRead(mem.R)
    t.setWrite(mem.W)
    t.setExecute(mem.X)
    t.setComment("Generated by AM335x Loader.")

    if mem.regs:
        # Create a struct for this memory region
        regblock_sz = max([r.offset for r in mem.regs])+4
        mem_struct = StructureDataType(mem.name,regblock_sz)

        for reg in mem.regs:
            r_type = UnsignedIntegerDataType()
            rsz = reg.size
            name = reg.name.replace(' ','_')
            mem_struct.replaceAtOffset(reg.offset,r_type,rsz,name,reg.name)
            #addr = addr_space.getAddress(mem.base_addr + reg.offset)
            #symtable.createLabel(addr,reg.name,namespace,SourceType.USER_DEFINED)
        dtypemgr.addDataType(mem_struct,DataTypeConflictHandler.REPLACE_HANDLER)
        listing.createData(addr,mem_struct,False)
    name = mem.name.replace(' ','_')
    symtable.createLabel(addr,name,namespace,SourceType.USER_DEFINED)

namespace = symtable.getNamespace("Exceptions", None)

if not namespace:
    namespace = currentProgram.getSymbolTable().createNameSpace(None, "Exceptions", SourceType.ANALYSIS)

vectype = UnsignedIntegerDataType()
for vec in rom_except_vectors:
    addr = addr_space.getAddress(vec.addr)
    cmd = ArmDisassembleCommand(addr, None, False)
    cmd.applyTo(currentProgram, monitor)
    symtable.createLabel(addr,vec.name,namespace,SourceType.USER_DEFINED)
for vec in ram_except_vectors:
    addr = addr_space.getAddress(vec.addr)
    listing.createData(addr,vectype,False)
    symtable.createLabel(addr,vec.name,namespace,SourceType.USER_DEFINED)
for vec in rom_except_deadloops:
    addr = addr_space.getAddress(vec.addr)
    cmd = ArmDisassembleCommand(addr, None, False)
    cmd.applyTo(currentProgram, monitor)
    symtable.createLabel(addr,vec.name,namespace,SourceType.USER_DEFINED)
for vec in ram_except_branches:
    addr = addr_space.getAddress(vec.addr)
    cmd = ArmDisassembleCommand(addr, None, False)
    cmd.applyTo(currentProgram, monitor)
    symtable.createLabel(addr,vec.name,namespace,SourceType.USER_DEFINED)




